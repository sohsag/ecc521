

# This file was *autogenerated* from the file edwards.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5 = Integer(5); _sage_const_12 = Integer(12); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff = Integer(0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff); _sage_const_0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa4331 = Integer(0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa4331); _sage_const_48 = Integer(48); _sage_const_14 = Integer(14); _sage_const_2 = Integer(2); _sage_const_864 = Integer(864); _sage_const_34 = Integer(34)
from sage.all import *
from collections import namedtuple
AffinePoint = namedtuple('AffinePoint', ['x', 'y'])
ProjectivePoint = namedtuple('ProjectivePoint', ['X', 'Y', 'Z'])

# conversions found https://neuromancer.sk/std/other/Ed25519
def to_weierstrass(d, p: AffinePoint):
    x = (_sage_const_5  + p.y - _sage_const_5  * d * p.y - d) / (_sage_const_12  - _sage_const_12  * p.y)
    y = (_sage_const_1  + p.y - d * p.y - d) / (_sage_const_4  * p.x - _sage_const_4  * p.x * p.y)
    return AffinePoint(x, y)


def to_edwards(d, p: AffinePoint):
    u, v = p
    y = (_sage_const_5  - _sage_const_12  * u - d) / (-_sage_const_12  * u - _sage_const_1  + _sage_const_5  * d)
    x = (_sage_const_1  + y - d * y - d) / (_sage_const_4  * v - _sage_const_4  * v * y)
    return AffinePoint(x, y)


def affine_to_proj(x, y):
    return ProjectivePoint(x, y, K(_sage_const_1 ))


def proj_to_affine(X, Y, Z):
    return AffinePoint(X / Z, Y / Z)


p = _sage_const_0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 
K = GF(p)
# d is currently in edwards form
d = K(
    _sage_const_0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa4331 )
# This is a weierstrass curve, that is birationally equivalent to the edwards curve with the d value above.
E = EllipticCurve(K, (
    K(-_sage_const_1  / _sage_const_48 ) * (_sage_const_1  + _sage_const_14  * d + d ** _sage_const_2 ),  # a
    K(_sage_const_1  / _sage_const_864 ) * (_sage_const_1  + d) * (-_sage_const_1  + _sage_const_34  * d - d ** _sage_const_2 )  # b
))


#G = E(*to_weierstrass(d, G_edwards))


def edwards_addition(P1, P2):
    # page 21
    X1, Y1, Z1 = P1
    X2, Y2, Z2 = P2

    A = Z1 * Z2
    B = A * A
    C = X1 * X2
    D = Y1 * Y2
    E = d * C * D
    F = B - E
    G = B + E

    X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    Y3 = A * G * (D - C)
    Z3 = G * F

    return ProjectivePoint(X3, Y3, Z3)



